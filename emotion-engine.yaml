imports: |-
  // Generated file. Do not edit!
  use super::control;
  use super::fpu;
  use super::instruction::Occurrence;
  use super::register::Register;
  use crate::bits::Bits;
  use std::fmt::{Display, Formatter};


operands:
  rs:
    type: Register
    decode: 'Register::from({}.bits(21..26))'
  rt:
    type: Register
    decode: 'Register::from({}.bits(16..21))'
  rd:
    type: Register
    decode: 'Register::from({}.bits(11..16))'
  ft:
    type: fpu::Register
    decode: 'fpu::Register::from({}.bits(16..21))'
  fs:
    type: fpu::Register
    decode: 'fpu::Register::from({}.bits(11..16))'
  fd:
    type: fpu::Register
    decode: 'fpu::Register::from({}.bits(6..11))'
  cd:
    type: control::Register
    decode: 'control::Register::from({}.bits(11..16))'
  sa:
    type: u8
    decode: '{}.bits(6..11) as u8'
  imm16:
    type: u16
    decode: '{}.bits(0..16) as u16'
  imm26:
    type: u32
    decode: '{}.bits(0..26)'

instructions:
  000000 00000 ..... ..... ..... 000000: '{rd} = sll {rt}, {sa}'
  000000 ..... ..... ..... ..... 000001: 'unknown'
  000000 00000 ..... ..... ..... 000010: '{rd} = srl {rt}, {sa}'
  000000 00000 ..... ..... ..... 000011: '{rd} = sra {rt}, {sa}'
  000000 ..... ..... ..... 00000 000100: '{rd} = sllv {rt}, {rs}'
  000000 ..... ..... ..... ..... 000101: 'unknown'
  000000 ..... ..... ..... 00000 000110: '{rd} = srlv {rt}, {rs}'
  000000 ..... ..... ..... 00000 000111: '{rd} = srav {rt}, {rs}'
  000000 ..... 00000 00000 00000 001000: {format: 'jr {rs}', predicates: [is_branch]}
  000000 ..... 00000 ..... 00000 001001: {format: 'jalr {rd}, {rs}', predicates: [is_branch]}
  000000 ..... ..... ..... 00000 001010: '{rd} = movz {rs}, {rt}'
  000000 ..... ..... ..... 00000 001011: '{rd} = movn {rs}, {rt}'
  000000 ..... ..... ..... ..... 001100: 'syscall'
  000000 ..... ..... ..... ..... 001101: 'break'
  000000 ..... ..... ..... ..... 001110: 'unknown'
  000000 00000 00000 00000 ..... 001111: 'sync'
  000000 00000 00000 ..... 00000 010000: {format: '{rd} = mfhi', uses: [Register::Hi]}
  000000 ..... 00000 00000 00000 010001: {format: 'mthi {rs}', defs: [Register::Hi]}
  000000 00000 00000 ..... 00000 010010: {format: '{rd} = mflo', uses: [Register::Lo]}
  000000 ..... 00000 00000 00000 010011: {format: 'mtlo {rs}', defs: [Register::Lo]}
  000000 ..... ..... ..... 00000 010100: '{rd} = dsllv {rt}, {rs}'
  000000 ..... ..... ..... ..... 010101: 'unknown'
  000000 ..... ..... ..... 00000 010110: '{rd} = dsrlv {rt}, {rs}'
  000000 ..... ..... ..... 00000 010111: '{rd} = dsrav {rt}, {rs}'
  000000 ..... ..... ..... 00000 011000: {format: '{rd} = mult {rs}, {rt}', defs: [Register::Lo, Register::Hi]}
  000000 ..... ..... ..... 00000 011001: {format: '{rd} = multu {rs}, {rt}', defs: [Register::Lo, Register::Hi]}
  000000 ..... ..... 00000 00000 011010: {format: 'div {rs}, {rt}', defs: [Register::Lo, Register::Hi]}
  000000 ..... ..... 00000 00000 011011: {format: 'divu {rs}, {rt}', defs: [Register::Lo, Register::Hi]}
  000000 ..... ..... ..... ..... 011100: 'unknown'
  000000 ..... ..... ..... ..... 011101: 'unknown'
  000000 ..... ..... ..... ..... 011110: 'unknown'
  000000 ..... ..... ..... ..... 011111: 'unknown'
  000000 ..... ..... ..... 00000 100000: '{rd} = add {rs}, {rt}'
  000000 ..... ..... ..... 00000 100001: '{rd} = addu {rs}, {rt}'
  000000 ..... ..... ..... 00000 100010: '{rd} = sub {rs}, {rt}'
  000000 ..... ..... ..... 00000 100011: '{rd} = subu {rs}, {rt}'
  000000 ..... ..... ..... 00000 100100: '{rd} = and {rs}, {rt}'
  000000 ..... ..... ..... 00000 100101: '{rd} = or {rs}, {rt}'
  000000 ..... ..... ..... 00000 100110: '{rd} = xor {rs}, {rt}'
  000000 ..... ..... ..... 00000 100111: '{rd} = nor {rs}, {rt}'
  000000 00000 00000 ..... 00000 101000: '{rd} = mfsa'
  000000 ..... 00000 00000 00000 101001: 'mtsa {rs}'
  000000 ..... ..... ..... 00000 101010: '{rd} = slt {rs}, {rt}'
  000000 ..... ..... ..... 00000 101011: '{rd} = sltu {rs}, {rt}'
  000000 ..... ..... ..... 00000 101100: '{rd} = dadd {rs}, {rt}'
  000000 ..... ..... ..... 00000 101101: '{rd} = daddu {rs}, {rt}'
  000000 ..... ..... ..... 00000 101110: '{rd} = dsub {rs}, {rt}'
  000000 ..... ..... ..... 00000 101111: '{rd} = dsubu {rs}, {rt}'
  000000 ..... ..... ..... ..... 110000: 'tge {rs}, {rt}'
  000000 ..... ..... ..... ..... 110001: 'tgeu {rs}, {rt}'
  000000 ..... ..... ..... ..... 110010: 'tlt {rs}, {rt}'
  000000 ..... ..... ..... ..... 110011: 'tltu {rs}, {rt}'
  000000 ..... ..... ..... ..... 110100: 'teq {rs}, {rt}'
  000000 ..... ..... ..... ..... 110101: 'unknown'
  000000 ..... ..... ..... ..... 110110: 'tne {rs}, {rt}'
  000000 ..... ..... ..... ..... 110111: 'unknown'
  000000 00000 ..... ..... ..... 111000: '{rd} = dsll {rt}, {sa}'
  000000 ..... ..... ..... ..... 111001: 'unknown'
  000000 00000 ..... ..... ..... 111010: '{rd} = dsrl {rt}, {sa}'
  000000 00000 ..... ..... ..... 111011: '{rd} = dsra {rt}, {sa}'
  000000 00000 ..... ..... ..... 111100: '{rd} = dsll32 {rt}, {sa}'
  000000 ..... ..... ..... ..... 111101: 'unknown'
  000000 00000 ..... ..... ..... 111110: '{rd} = dsrl32 {rt}, {sa}'
  000000 00000 ..... ..... ..... 111111: '{rd} = dsra32 {rt}, {sa}'
  000001 ..... 00000 ..... ..... ......: {format: 'bltz {rs}, {imm16:#x}', predicates: [is_branch]}
  000001 ..... 00001 ..... ..... ......: {format: 'bgez {rs}, {imm16:#x}', predicates: [is_branch]}
  000010 ..... ..... ..... ..... ......: {format: 'j {imm26:#x}', predicates: [is_branch]}
  000011 ..... ..... ..... ..... ......: {format: 'jal {imm26:#x}', predicates: [is_branch]}
  000100 ..... ..... ..... ..... ......: {format: 'beq {rs}, {rt}, {imm16:#x}', predicates: [is_branch]}
  000101 ..... ..... ..... ..... ......: {format: 'bne {rs}, {rt}, {imm16:#x}', predicates: [is_branch]}
  000110 ..... 00000 ..... ..... ......: {format: 'blez {rs}, {imm16:#x}', predicates: [is_branch]}
  000111 ..... 00000 ..... ..... ......: {format: 'bgtz {rs}, {imm16:#x}', predicates: [is_branch]}
  001000 ..... ..... ..... ..... ......: '{rt} = addi {rs}, {imm16}'
  001001 ..... ..... ..... ..... ......: '{rt} = addiu {rs}, {imm16}'
  001010 ..... ..... ..... ..... ......: '{rt} = slti {rs}, {imm16}'
  001011 ..... ..... ..... ..... ......: '{rt} = sltiu {rs}, {imm16}'
  001100 ..... ..... ..... ..... ......: '{rt} = andi {rs}, {imm16}'
  001101 ..... ..... ..... ..... ......: '{rt} = ori {rs}, {imm16}'
  001110 ..... ..... ..... ..... ......: '{rt} = xori {rs}, {imm16}'
  001111 00000 ..... ..... ..... ......: '{rt} = lui {imm16:#x}'
  010000 00000 ..... ..... 00000 000000: '{rt} = mfc0 {cd}'
  010000 00100 ..... ..... 00000 000000: '{cd} = mtc0 {rt}'
  010000 10000 00000 00000 00000 000001: 'tlbr'
  010000 10000 00000 00000 00000 000010: 'tlbwi'
  010000 10000 00000 00000 00000 000110: 'tlbwr'
  010000 10000 00000 00000 00000 001000: 'tlbp'
  010000 10000 00000 00000 00000 111000: 'ei'
  010001 00000 ..... ..... 00000 000000: '{rt} = mfc1 {fs}'
  010001 00100 ..... ..... 00000 000000: '{fs} = mtc1 {rt}'
  010001 10000 ..... ..... ..... 000010: '{fd} = mul.s {fs}, {ft}'
  010001 10000 ..... ..... ..... 000011: '{fd} = div.s {fs}, {ft}'
  010001 10000 00000 ..... ..... 000110: '{fd} = mov.s {fs}'
  010001 10000 00000 ..... ..... 100100: '{fd} = cvt.w.s {fs}'
  010001 10100 00000 ..... ..... 100000: '{fd} = cvt.s.w {fs}'
  010100 ..... ..... ..... ..... ......: {format: 'beql {rs}, {rt}, {imm16:#x}', predicates: [is_branch, is_branch_likely]}
  010101 ..... ..... ..... ..... ......: {format: 'bnel {rs}, {rt}, {imm16:#x}', predicates: [is_branch, is_branch_likely]}
  011100 00000 00000 ..... 00000 010000: {format: '{rd} = mfhi1', uses: [Register::Hi]}
  011100 ..... 00000 00000 00000 010001: {format: 'mthi1 {rs}', defs: [Register::Hi]}
  011100 00000 00000 ..... 00000 010010: {format: '{rd} = mflo1', uses: [Register::Lo]}
  011100 ..... 00000 00000 00000 010011: {format: 'mtlo1 {rs}', defs: [Register::Lo]}
  011100 ..... ..... 00000 00000 011010: {format: 'div1 {rs}, {rt}', defs: [Register::Lo, Register::Hi]}
  011100 ..... ..... 00000 00000 011011: {format: 'divu1 {rs}, {rt}', defs: [Register::Lo, Register::Hi]}
  011111 ..... ..... ..... ..... ......: 'sq {rt}, {imm16:#x}({rs})'
  100000 ..... ..... ..... ..... ......: '{rt} = lb {imm16:#x}({rs})'
  100001 ..... ..... ..... ..... ......: '{rt} = lh {imm16:#x}({rs})'
  100011 ..... ..... ..... ..... ......: '{rt} = lw {imm16:#x}({rs})'
  100100 ..... ..... ..... ..... ......: '{rt} = lbu {imm16:#x}({rs})'
  100101 ..... ..... ..... ..... ......: '{rt} = lhu {imm16:#x}({rs})'
  100110 ..... ..... ..... ..... ......: {format: '{rt} = lwr {imm16:#x}({rs})', uses: [rt]}
  101000 ..... ..... ..... ..... ......: 'sb {rt}, {imm16:#x}({rs})'
  101001 ..... ..... ..... ..... ......: 'sh {rt}, {imm16:#x}({rs})'
  101011 ..... ..... ..... ..... ......: 'sw {rt}, {imm16:#x}({rs})'
  110001 ..... ..... ..... ..... ......: '{ft} = lwc1 {imm16:#x}({rs})'
  110111 ..... ..... ..... ..... ......: '{rt} = ld {imm16:#x}({rs})'
  111001 ..... ..... ..... ..... ......: 'swc1 {ft}, {imm16:#x}({rs})'
  111111 ..... ..... ..... ..... ......: 'sd {rt}, {imm16:#x}({rs})'
